#!csharp

/// Common
using System.IO;

void print<T>(T s) { System.Console.WriteLine(s); }

var input = File.ReadLines("input.txt");

public record Step(string heading, int magnitude);

var route = 
  input
    .Select(item => item.Split())
    .Select(item => new Step(item[0], int.Parse(item[1])))
    .ToList();

#!csharp

/// Part 1
public record Point(int x, int y);

var stepHandler = (Point position, Step step) =>
  step.heading switch {
    "forward" => position with { x = position.x + step.magnitude},
    "up" => position with { y =  position.y - step.magnitude},
    "down" => position with { y =  position.y + step.magnitude},
    _ => throw new NotImplementedException()
  };

var position = route.Aggregate(new Point(0, 0), stepHandler);

print($"x: {position.x}, y: {position.y}, solution: {position.x * position.y}");

#!csharp

/// Part 2
public record Position(int x, int y, int aim);

var stepHandler = (Position position, Step step) =>
  step.heading switch {
    "forward" => position with { x = position.x + step.magnitude, y = position.y + (position.aim * step.magnitude)},
    "up" => position with { aim = position.aim - step.magnitude},
    "down" => position with { aim = position.aim + step.magnitude},
    _ => throw new NotImplementedException()
  };

var position = route.Aggregate(new Position(0, 0, 0), stepHandler);

print($"x: {position.x}, y: {position.y}, solution: {position.x * position.y}");
